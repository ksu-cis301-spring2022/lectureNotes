HW 4 due Thursday, February 17
    - these are a bit trickier
    - some of them have hints

HW submission: MUST be in specified format
    ..../tree/(digital fingerprint)
    or will receive a 0

////////////////////////////////////

Exam 1 discussion.

High: 80/80 (2 students)
Average: 60/80 (75%)

A (72 and up): 24 students
B (64-71): 13 students
C (56-63): 6 students
D (48-55): 13 students
F (below 48): 14 students

What if you didn't do as well as you'd like?

Working through exam.

////////////////////////////////////

Last propositional logic proof rules.


Bottom-elimination:

          _|_
_|_e:  ----------
           R


Proof by contradiction (reductio ad absurdum):

       {!P assume
        ... _|_}
pbc:  ----------
          P

///////////////////////////////////

¬(¬p ∨ ¬q) ⊢ p ∧ q

⊢ p ∨ ¬p
    (law of the excluded middle, LEM)

p → q ⊢ ¬p ∨ q



///////////////////////////////////

Revisiting...how do we approach proofs?


How do we remember line number orders?
    (And why does it matter?)


(STOP HERE - everything else on Thurs Feb 17)

///////////////////////////////////

if and only if, iff, bi-implication

p IF AND ONLY IF q

(p -> q) ^ (q -> p)

p <-> q

either both are true or both are false







////////////////////////////////////

sequent

turnstile operator

P1, ..., Pn |- C

the premises together with the conclusion
    is a sequent

P1, ..., PN *prove* C






///////////////////////////////////

A sequent is *invalid* if there exists a truth assignment
that makes the premises true but the conclusion false



Example:

p → q, r -> q |- ¬r → ¬p

Is the sequent valid?






///////////////////////////////////

A THEOREM in propositional logic is something that is
always true with no need for premises. For example,
LEM is a theorem:

|- p V !p


The LEM theorem is p V !p.

|- (theorem that you are trying to prove)

//////////////////////////////////

Example: prove the following theorem:

(p -> q) -> ((!p -> q) -> q)





///////////////////////////////////

Semantic entailment.

P1, ..., Pn |= C

P1, ..., Pn ENTAILS C

if whenever P1, ..., Pn are true in a truth table, then
C is also true.

IF each Pi is true, THEN we promise C is true

How could we write this in a truth table?

What kind of truth table would it need to be?


/////////////////////////////////////

Example: proofs with truth tables

Show that the premises entail the conclusion:

p V q |= (p V r) V (q V r)

using ONE truth table









/////////////////////////////////////

SOUNDNESS and COMPLETENESS of propositional logic

SOUNDNESS: everything that is provable is actually true



COMPLETENESS: everything that is true is provable



What would it meant to be sound and complete?



//////////////////////////////////////

Propositional logic is SOUND, because whenever we use
natural deduction to prove

P1, P2, ..., Pn ⊢ q

we can also use truth tables to show that

(P1 ^ ... ^ Pn) -> q

is a tautology


Proof idea:

^e rule lets us have p ^ q |- p


Does p ^ q |= p?



Would need to show this with all proof rules.


////////////////////////////////////////

Propositional logic is COMPLETE, because whenever we
use truth tables to show that

(P1 ^ ... ^ Pn) -> q

is a tautology (that P1, ..., Pn |= q)

we can also use natural deduction to prove

P1, P2, ..., Pn ⊢ q

...idea involves turning each line of a truth table
    into a sequent

relies heavily on LEM (p V !p)



///////////////////////////////////////

Provable equivalence

Two propositional logic statements S1, S2 are
*provably equivalent* iff:

???






/////////////////////////

Semantic equivalence

Two propositional logic statements S1, S2 are
    *semantically equivalent* iff:

???



/////////////////////////

Example:

First formula: (p → ¬ q)
Second formula: ¬ (p ∧ q)

Show that they are provably equivalent




Show that they are semantically equivalent



/////////////////////////


How do you think Logika works?
    ...for truth tables?



    ...for proofs?


How does this relate to compilers?