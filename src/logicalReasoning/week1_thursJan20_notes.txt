HW 0 due by midnight tonight (11:59 pm)
    - can turn in until midnight Friday for 10% late penalty

////////////////////////////////////////

**where to find examples from class
**weekly review quizzes


/////////////////////////////////

The puzzles in this lecture are all either from or inspired by:
”What is the Name of This Book?”, by Raymond Smullyan

/////////////////////////////////
The first puzzles involve the island of Knights and Knaves.
Each inhabitant is either a knight or a knave.

Knights ALWAYS tell the truth, and knaves ALWAYS lie.

/////////////////////////////////

Who can say, "I'm a knave"?

No one! Everyone would say they were a knight.






/////////////////////////////////

You see two inhabitants, Ava and Bob.

Ava says that Bob is a knave.
Bob says, ”Neither Ava nor I are knaves.”

What are Ava and Bob?

Suppose Ava is a knight. Then Bob must be a knave.
    Bob's statement would be a lie, which works out.

Suppose Ava is a knave. Then Bob must be a knight.
    Then Bob's statement would be a lie (since Ava is a
    knave), which doesn't work since Bob should be telling
    the truth.

Answer: Ava is a knight, Bob is a knave








/////////////////////////////////

You see two different inhabitants, Eve and Fred.

Eve says, ”I am a knave or Fred is a knight.”

What are Eve and Fred?

(what does the "or" mean?) -> NOT exclusive or (inclusive)

Suppose Eve is a knight. Then to make her statement true,
    Fred must also be a knight.

Suppose instead that Eve is a knave. Then her statement
    would be true, but it should be a lie. Doesn't work.

Answer: Eve is a knight, Fred is also a knight






////////////////////////////////////

You meet three inhabitants: Sarah, Bill and Mae.

Sarah tells you that only a knave would say that
    Bill is a knave.
Bill claims that it's false that Mae is a knave.
Mae tells you, “Bill would tell you that I am a knave.”

What types are Sarah, Bill, and Mae?

Rewriting:

Sarah says: Bill is a knight
Bill says: Mae is a knight
Mae says: “Bill would tell you that I am a knave.”

Assume Sarah is a knight. Then Bill must be a knight.
    Then Mae must be a knight too. Bill wouldn't say
    Mae is a knave, so this doesn't work.

Assume instead Sarah is a knave. Then Bill must be a knave.
    Then Mae must be a knave too. Mae's statement works
    (Bill would say she's a knight, but Mae would lie
    and say Bill would say she's a knave.)

Answer is: all knaves



////////////////////////////////////

Lion always lies on Mondays, Tuesdays, and Wednesdays.
Lion always tells the truth on other days.
Unicorn always lies on Thursdays, Fridays, and Saturdays,
    and always tells the truth on other days.

On Sunday, everyone tells the truth.

Lion says:  ”Yesterday was one of my lying days.”
Unicorn says:  ”Yesterday was one of my lying days, too.”

What day is it?

Sunday? No. Lion would tell the truth, and Saturday
    wasn't one of his lying days.
Monday? No. Lion's statement works out, but Unicorn's
    would be a lie and Unicorn should be telling the truth.
Tuesday? No. Lion's would be a lie (so would Unicorn's)
Wednesday? No. Same situation.
Thursday? Yes! Lion's is true, Unicorn's is a lie
    (as it should be)
Friday/Saturday won't work, since Lion's would be a lie
    (and shouldn't be).







////////////////////////////////

Tweedledee and Tweedledum are identical.
You know that one of them lies Mon/Tues/Wed,
and that the other lies Thurs/Fri/Sat.
(They tell the truth on non-lying days.)

You don’t know which is which.

You see both of them together.
The first one says:  ”I’m Tweedledum.”
The second one says:  ”I’m Tweedledee.”

Which is which?  What day is it?

Must be a Sunday. Any other day, one would lie and one
would tell the truth (and they would both give you the same
name).

First is Tweedledum, second is Tweedledee.




//////////////////////////////////
Another Tweedledee and Tweedledum (same rules).

First twin: Today is Monday or Wednesday
Second twin: Today is Monday or Sunday

What day of the week is it?

Monday? No. Both statements would be true, and someone
    should be lying.
Tuesday? Thursday? Friday? Saturday? No. Both statements
    would be a lie, and someone is telling the truth.
Sunday? First is a lie, and both should be true.
Wednesday. Yes, First is true, second is false.






//////////////////////////////////
You know that either Tweedledum or Tweedledee has
    lost a rattle.
You find it, and want to return it to the correct one.
You don’t know what day it is, but are sure that it isn’t
    Sunday.

(so one must be lying and one must be telling the truth).

The first one says:  "Tweedledee owns the rattle.”

The second one says: ”I'm Tweedledee!”

Who gets the rattle?

Assume first is telling the truth. The second would be
    lying. The second must be Tweedledum. So the first
    must be Tweedledee, so the rattle goes to the first one.

Assume instead the first twin is lying. The second twin
    would be telling the truth. SEcond would be Tweedledee,
    first would be Tweedledum. First twin is lying
    so Tweedledum owns the rattle (which is the first one).

In both situations, give the rattle to the first twin.

Who is who? Don't have enough information - could
    be either way.


///////////////////////////////////////////
Based on Shakespeare's ”Merchant of Venice”.

There are three caskets – one gold, one silver,
    and one lead.
One of the caskets contains a portrait.
Each casket has a message on it, and you know that at most
    one of the messages is true.

Gold casket:  ”The portrait is in this casket.”
Silver casket:  ”The portrait is not in this casket.”
Lead casket:  ”The portrait is not in the gold casket.”

Where is the portrait?

Suppose it is in the gold casket.
    Gold message is true, silver also true
    Nope! At most one message should be correct.

Suppose it is in the silver casket.
    Gold message is false, silver false, lead true
    Works out. Only one message is true.

Suppose in lead casket.
    Gold and lead messages both true - doesn't work.


Must be in silver casket.



///////////////////////////////////

Start truth tables.

    p V q ^ r

Variables can be true or false
V is an OR (inclusive or) (written as capital V)
^ is an AND (the caret ^ )
! ( ~


Basic operations: ^, V, !, ->

^ - and
V - or
! - not ~
-> - implies


///////////////////////////////////////////////////

Fill in basic operations:


p q | p ^ q
------------
T T |   T
T F |   F
F T |   F
F F |   F

p q | p V q
------------
T T |   T
T F |   T
F T |   T
F F |   F

p | !p
-------
T | F
F | T

////////////////////////////////////////////////

IMPLIES operator ->

"If I have a test, then I will study"

p: I have a test
q: I will study

p -> q

It is false if we have BROKEN A PROMISE.
It is true otherwise.

p q | p -> q
------------
T T |   T
T F |   F
F T |   T
F F |   T   (vacuously true)

How does the implies operator relate to programming?

//////////////////////////////////////////

3 - 2 + 4 - 2 * 8

3 - 2 + 4 - 16

From highest to lowest precedence:
    (), !, ^, V, ->


Given this statement:
    p -> q V !r

Evaluate the following truth assignment:

p is T
q is F
r is F

T -> F V !F
T -> F V T
T -> T
overall: true


////////////////////////////////////////////////

Order of operations
    ! evaluates right to left
        !!p is equivalent to !(!p)

    ^ and V evaluate left to right
        p ^ q ^ r is equivalent to (p ^ q) ^ r
        p V q V r is equivalent to (p V q) V r

    -> evaluates right to left
        p -> q -> r is equivalent to p -> (q -> r)





//////////////////////////////////////////

Top-level operator (what happens LAST?)
Rewrite each with parentheses to show order of operations.

p -> q V !r ^ p

p -> (q V ((!r) ^ p))

top-level operator: ->

///////////////////////////////

p ^ q V r ^ p

(p ^ q) V (r ^ p)

top-level operator: V


p ^ q ^ r ^ s

((p ^ q) ^ r) ^ s

top-level operator is right-most ^

////////////////////////////////////////////////////

Truth tables in Logika

Contingent, contradictory, tautology

Contigent: some true, some false
Contradictory: all false
Tautology: all true

Tautology : p V !p
Contradictory: p ^ !p

Satisfiable - there is at least one truth assignment that
    makes the formula true

/////////////////////////////////////
Next:
more with truth tables
equivalent formulae
begin propositional logic