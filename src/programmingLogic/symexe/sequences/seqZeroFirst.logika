//symexe mode

import org.sireum.logika._

//"Unit" is like a void return type
def makeFirstZero(seq: ZS): Unit = {
    //how would we write the function contract?
    //what do we want to require of seq?
    //how can we describe how seq will change?
    l"""{
        //need to complete
        requires seq.size >= 1
        modifies seq
        ensures
            seq(0) == 0
            //every other element is the same
            A x: (1..<seq.size) seq(x) == seq_in(x)
            //promise the size won't change
            seq.size == seq_in.size
    }"""

    seq(0) = 0
}

///// Test code ///////////

var nums: ZS = ZS(1,2,3)
makeFirstZero(nums)

//we want to claim that nums is what it was, but with the first
//element as a 0
assert(nums == ZS(0,2,3))