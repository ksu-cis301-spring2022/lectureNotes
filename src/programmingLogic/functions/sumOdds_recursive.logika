import org.sireum.logika._

def sumOdds(n: Z): Z = {
    l"""{
        requires n >= 1
        ensures result == n*n
    }"""

    //we can list the precondition as a premise
    l"""{
        1. n >= 1                   premise
    }"""

    var answer: Z = 0

    //base case?
    if (n == 1) {
        answer = 1

        l"""{
            1. n == 1                   premise //from the condition
            2. answer == 1              premise //from the assignment
            3. answer == n*n            algebra 1 2
            //need answer == n*n
        }"""
    } else {
        l"""{
            1. !(n == 1)                premise //!(condition)
            2. n >= 1                   premise //precondition
            3. n > 1                    algebra 1 2
            4. n - 1 >= 1               algebra 3
            //need: n-1 >= 1 for precondition
        }"""

        answer = sumOdds(n-1)

        //I know the postcondition is true
        l"""{
            1. answer == (n-1)*(n-1)        premise
            2. answer = n*n - 2*n + 1       algebra 1
        }"""

        answer = answer + 2*n - 1
        l"""{
            1. answer == answer_old + 2*n - 1   premise //assignment
            2. answer_old = n*n - 2*n + 1       premise //from previous logic block
            3. answer == n*n                    algebra 1 2
        }"""

        //need answer == n*n
    }

    //need to prove the postcondition
    //we need this to be true in the if AND the else
    l"""{
        //need answer == n*n
        1. answer == n*n                    premise //true in if AND else
    }"""

    return answer
}

////////////// Test code //////////////

val pos: Z = 4

//call sumOdds to get the sum of the 4 odd numbers
//what do we want to assert that it is?

//show we have satisfied the precondition
l"""{
    1. pos == 4                 premise
    2. pos >= 1                 algebra 1
    //need: pos >= 1
}"""

val test: Z = sumOdds(pos)

//we can pull in the postcondition
l"""{
    1. test == pos*pos              premise //the postcondition
    2. pos == 4                     premise
    3. test == 16                   algebra 1 2
}"""

assert(test == 16)