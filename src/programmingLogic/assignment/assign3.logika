import org.sireum.logika._

//get positive user input number
var num: Z = readInt("Enter positive number: ")

assume(num > 0)


//save out original number in a separate val
val orig: Z = num

//I know orig == num

//multiply input number by 2
num = num * 2

l"""{
    1. num == num_old * 2           premise
    2. orig == num_old              premise
    3. num == orig * 2              algebra 1 2
    4. 2 > 0                        algebra
    5. num_old > 0                  premise
    6. num >= 0                     algebra 1 5
    7. num % 2 == 0                 algebra 1
}"""



//number should now be even (why?)
assert(num % 2 == 0)


//add 2 to the input number

num = num + 2

l"""{
    1. num == num_old + 2               premise
    2. num_old >= 0                     premise //from line 6 in block above
    3. num_old % 2 == 0                 premise //from line 7 in block above
    //we know 2 > 0 from previous block
    //needs num >= 0
    4. num >= 0                         algebra 1 2
    5. num % 2 == 0                     algebra 1 3 //needed for next assert
    6. num_old == orig * 2              premise //from line 3 in block above
    7. num - 2 == orig * 2              algebra 1 6
}"""



//number should still be even - why?
assert(num % 2 == 0)

l"""{
    1. 2 != 0                  algebra //needed for dividing by 2
}"""

//divide the input number by 2 and subtract 1

num = num/2 - 1

l"""{
    1. num == num_old/2 - 1             premise
    2. num_old - 2 == orig * 2          premise //from line 7 in block above
    3. num_old == orig * 2 + 2          algebra 2
    4. num == (orig * 2 + 2)/2 - 1      algebra 1 3
    5. num == orig + 1 - 1              algebra 4
    6. num == orig                      algebra 5
    //we could have combined the last three lines using algebra once,
    //but I wanted to be clear what we were doing
}"""





//what is num now?
assert(num == orig)
