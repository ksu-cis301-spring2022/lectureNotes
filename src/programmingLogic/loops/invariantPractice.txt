Practicing loop invariants.


l"""{
    fact
        def pow3(n: Z): Z
            pow0. pow3(0) == 1
            powN. A x: Z x > 0 -> pow3(x) == 3 * pow3(x - 1)
}"""

var x: Z = 1;
var i: Z = 0;
while (i < n) {
    x = x * 3;
    i = i + 1;
}

1) What is the code doing? Walk through variable updates.

x = 1, 3, 9, 27
i = 0, 1, 2, 3

x == pow3(i)
i >= 0
i <= n


x = 3 * 3 * ... * 3 (i times)

2) How can we describe the progress at a particular point?

3) Bound the loop counter
    (only sometimes needed, but never hurts)

////////////////////////////////

var x: Z = n;
var d: Z = 0;
while (x >= a) {
    //invariant
    //n == x + a*d
    //20 == 20 + 3*0
    //20 == 17 + 3*1
    //20 == 14 + 3*2

    x = x - a
    d = d + 1
}

1) What is the code doing? Walk through variable updates.

x = n, n-a, n-2a, n-3a
d = 0, 1,   2,    3

n = 20
a = 3

x = 20, 17, 14, 11, 8, 5, 2
d = 0,  1,  2,  3,  4, 5, 6

2) How can we describe the progress at a particular point?

3) Bound the loop counter
    (only sometimes needed, but never hurts)

//////////////////////////////////////

//this is not a Logika program, but the idea remains

//nums is an int array

int x = 0;

for (int i = 0; i < nums.Length; i++) {
    nums[i] = x;
    x = x + 2;
}

1) What is the code doing? Walk through variable updates.

2) How can we describe the progress at a particular point?

after i iterations
    I have set the first i positions
    x == 2*i
    for each of those first i positions
        nums[index] = index * 2

    from position i on, nums[i] is the value it had before the loop

    i >= 0
    i <= nums.Length

3) Bound the loop counter
    (only sometimes needed, but never hurts)
