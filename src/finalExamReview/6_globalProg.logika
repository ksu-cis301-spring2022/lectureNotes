import org.sireum.logika._

//Assume we are in SYMEXE mode

//In the program below, complete the function contract in the castVotes function
//so the program (including the asserts at the bottom) would be verified
//in Logika's symexe mode.



var total: Z = 0
var cand1: Z = 0
var cand2: Z = 0

//global invariants
l"""{
    invariant
        total == cand1 + cand2
        cand1 >= 0
        cand2 >= 0
}"""

def castVotes(candNum: Z, numVotes: Z) : Unit = {
    l"""{
        //COMPLETE THE FUNCTION CONTRACT
        requires candNum == 1 V candNum == 2
            numVotes >= 0
        modifies cand1, cand2, total
        ensures
            total == total_in + numVotes
            candNum == 1 -> cand1 == cand1_in + numVotes
            candNum == 2 -> cand2 == cand2_in + numVotes
    }"""

    //could list the global invariants as premises

    if (candNum == 1) {
        cand1 = cand1 + numVotes
    }

    if (candNum == 2) {
        cand2 = cand2 + numVotes
    }

    total = total + numVotes

    //in manual mode, I would need to manually prove the
    //global invariants still hold
}

//////// Test code ///////////
assert(total == 0 & cand1 == 0 & cand2 == 0)

//the global invariants and preconditions must be true here
castVotes(1, 3)
//list global invariants and postconditions as premises

assert(total == 3 & cand1 == 3 & cand2 == 0)

castVotes(2, 2)
assert(total == 5 & cand1 == 3 & cand2 == 2)

castVotes(1, 1)
assert(total == 6 & cand1 == 4 & cand2 == 2)